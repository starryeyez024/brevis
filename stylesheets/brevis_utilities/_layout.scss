
////////////////////////////////////////////////////
// FLUID GRID COLUMNS  http://sassmeister.com/gist/710eded4e6a323fdfdb6
///////////////////////////////////////////////////
$fluid-grid-cols: 1;
$fluid-grid-grid-rows: 10;
$fluid-grid-padding: 20px;
$fluid-grid-class-name: views-row;

@mixin fluid-grid(
 $cols: $fluid-grid-cols,
 $grid-rows: $fluid-grid-grid-rows,
 $padding: $fluid-grid-padding,
 $class-name: $fluid-grid-class-name
){
  .#{$class-name} {
    width: calc((100% / #{$cols}) + (#{$padding} / #{$cols}));
    padding: 0 0 $padding $padding;
  }
  @for $x from 1 through $grid-rows {
    .#{$class-name}-#{$x * $cols - ($cols - 1)} {
      margin-left: -$padding;
      clear: both;
    }
  }
}

@mixin grid-mobile(
 $class-name: $fluid-grid-class-name
){
  .#{$class-name} {
    float: left;
    clear: both;
    width: 100%;
    @include box-sizing("border-box");
  }
}

@mixin grid-desktop(
 $class-name: $fluid-grid-class-name
 ){
  .#{$class-name} {
    float: left;
    clear: none;
    @include box-sizing("border-box");
  }
}

// When using the fluid grid mixin, plug in the following variables:
// the number of columns
// the number of rows (if you are unsure guess and add 1 or 2)
// the padding for the left & right edge of each row
// and the name of the class for the rows themselves.

// Use the grid-mobile mixin for mobile, and then add a breakpoint
// and use the grid-desktop mixin for columns 2 and up.



//======================================

@mixin width-25($padding: 0) {
  width: 25%;
  float: left;
  padding: $padding;
}

@mixin width-33($padding: 0) {
  width: 33.33%;
  float: left;
  padding: $padding;
}

@mixin width-50($padding: 0) {
  width: 50%;
  float: left;
  padding: $padding;
}

@mixin width-66($padding: 0) {
  width: 66%;
  float: left;
  padding: $padding;
}

@mixin width-75($padding: 0) {
  width: 75%;
  float: left;
  padding: $padding;
}

@mixin width-100($padding: 0) {
  width: 100%;
}

@mixin width-50-100($padding: 0) {
  width: 100%;
  float: left;
  padding: $padding;
  @include breakpoint($tablet-portrait) {
    width: 50%;
    float: left;
    padding: $padding;
  }
}


@mixin vertical-center(
  $container-height: 300px,
  $inner-name: ".block-inner",
  $inner-width: "80%") {
  height: $container-height;
  text-align: center;
  &:before {
    content: '';
    display: inline-block;
    height: 100%;
    vertical-align: middle;
  }
  #{$inner-name} {
    display: inline-block;
    vertical-align: middle;
    width: $inner-width;
    padding: (100% - $inner-width)/2;
  }
}

// Vertical Alignment with Intrinsic ratio which sets the height of the container
// http://sassmeister.com/gist/bbdf3b09d856138b3989
@mixin vertical-center-with-ir (
  $inner-name: ".block-inner",
  $inner-width: 90%,
  $container-height: auto,
  $inner-inner-name: "#{$inner-name}-inner" ){
  #{$inner-name} {
    height: 100%;
    display: inline-block;
    vertical-align: middle;
    width: $inner-width;
    position: absolute !important;
    top: 0;
    left: (100% - $inner-width) / 2;
    &:before {
      content: '';
      display: inline-block;
      height: 100%;
      width: 0;
      font-size: 0;
      vertical-align: middle;
    }
  }
  #{$inner-name}-inner {
    display: inline-block;
    vertical-align: middle;
    width: 98%;
    text-align: center;
  }
}

//this allows you to change out the container and internal name.

@mixin vertical-center-with-ir-flex (
  $inner-name: ".block-inner",
  $inner-inner:".block-inner",
  $inner-width: 80%,
  $container-height: auto)
  {
  #{$inner-name} {
    height: 100%;
    display: inline-block;
    vertical-align: middle;
    width: $inner-width;
    position: absolute;
    top: 0;
    left: (100% - $inner-width) / 2;
    &:before {
      content: '';
      display: inline-block;
      height: 100%;
      width: 0;
      font-size: 0;
      vertical-align: middle;
    }
  }
  #{$inner-inner} {
    display: inline-block;
    vertical-align: middle;
    width: 98%;
  }
}

@mixin equal-height{
  .region-inner{
    display: flex;
    flex-wrap: wrap;
  }
}



//////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////
// Panel region layouts, used best with Classy Panel Styles

$spacing: 15px;
$spacing-double: $spacing * 2;
$spacing-triple: $spacing * 3;
$content-max-width: 1000px;

@mixin content-max-width {
  max-width: $content-max-width;
  margin: 0 auto;
}

// To make hero styles work with IPE:
// Use in @include panel-pane-with-ipe place of .panel-pane
@mixin panel-pane-with-ipe {
  .main-layout-pane {
    @content;
  }
  .panels-ipe-portlet-wrapper {
    @content;
    .main-layout-pane {
      width: 100% !important;
      margin: 0;
      padding: 0;
    }
  }
}
// To make hero styles work with IPE:
// Use in @include panel-pane-with-ipe place of .panel-pane
@mixin panel-pane-ipe-compound {
  &.main-layout-pane {
    @content;
  }
  &.panels-ipe-portlet-wrapper {
    @content;
    .main-layout-pane {
      width: 100% !important;
      margin: 0;
      border: 0;
      padding: 0;
      //padding: 0 !important;
    }
  }
}

@mixin panel-pane($nth: null) {
  @if ($nth) {
    .main-layout-pane:nth-child(#{$nth}),
    .panels-ipe-portlet-wrapper:nth-child(#{$nth}) .main-layout-pane {
      @content;
    }
  }
  @else {
    .main-layout-pane,
    .panels-ipe-portlet-wrapper .main-layout-pane {
      @content;
    }
  }
}
//////////////////////////////////////////////////////////////////
// REGION COLUMN LAYOUT MIXINS
// These styles only account for left & right margins between panes
@mixin region-1col {
  clear: both;
  width: 100%;
  margin-left: auto;
  margin-right: auto;
  @include breakpoint(max-width $tab-l) {
    @include panel-pane-ipe-compound {
      &[class*='cta-primary'],
      &[class*='cta-secondary'] {
        max-width: 450px;
      }
    }
  }
}
@mixin region-col($cols: 3, $space: $spacing, $offset: null, $margin-direction: right, $rows: 3) {
  margin-#{$margin-direction}: $spacing;
  clear: none;
  max-width: 100%;
  $minus-margins: ceil($space * (($cols - 1) / $cols)) + 1px;

  @if $margin-direction == "right" {
    float: left;
  }
  @if $margin-direction == "left" {
    float: right;
  }

  @if $offset {
    &:nth-child(n+#{$offset + 1}) {
      width: calc( (100% / #{$cols}) - #{$minus-margins});
    }
    &:nth-child(#{$cols + $offset}),
    &:nth-child(#{$cols * 2 + $offset}),
    &:nth-child(#{$cols * 3 + $offset}) {
      margin-#{$margin-direction}: 0;
    }
    &:nth-child(#{$cols + 1 + $offset}),
    &:nth-child(#{$cols * 2 + 1 + $offset}),
    &:nth-child(#{$cols * 3 + 1 + $offset}) {
      clear: left;
    }
  }
  @else {
    width: calc( (100% / #{$cols}) - #{$minus-margins});

    &:nth-child(#{$cols}),
    &:nth-child(#{$cols * 2}),
    &:nth-child(#{$cols * 3}) {
      margin-#{$margin-direction}: 0;
    }
    &:nth-child(#{$cols + 1}),
    &:nth-child(#{$cols * 2 + 1}),
    &:nth-child(#{$cols * 3 + 1}), {
      clear: left;
    }
  }
}